openapi: 3.0.3
info:
  title: Supacrawler Scraper Engine API
  version: 0.1.0
  description: HTTP API for scraping, mapping, crawling, and screenshots
servers:
  - url: https://api.supacrawler.com
    description: Production API
security:
  - BearerAuth: []
tags:
  - name: health
  - name: scrape
  - name: parse
  - name: jobs
  - name: screenshots
paths:
  /internal/health:
    get:
      tags: [health]
      summary: Health check
      responses:
        '200':
          description: ok
          content:
            text/plain:
              schema:
                type: string
  /v1/scrape:
    get:
      tags: [scrape]
      summary: Scrape a single URL
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
        - in: query
          name: format
          schema:
            type: string
            enum: [markdown]
            default: markdown
          description: Output format for scraped content (currently only markdown is supported)
        - in: query
          name: depth
          schema:
            type: integer
            minimum: 0
        - in: query
          name: max_links
          schema:
            type: integer
            minimum: 0
        - in: query
          name: include_html
          schema:
            type: boolean
        - in: query
          name: fresh
          schema:
            type: boolean
        - in: query
          name: proxy_mode
          schema:
            type: string
            enum: [off, shared_pool, residential]
            default: off
        - in: query
          name: proxy_region
          schema:
            type: string
            description: ISO country code (e.g., "us", "eu", "gb")
        - in: query
          name: proxy_session
          schema:
            type: string
            description: Sticky session key for proxy consistency
        - in: query
          name: rotate_user_agent
          schema:
            type: boolean
            default: true
        - in: query
          name: enable_bot_protection
          schema:
            type: boolean
            default: true
        - in: query
          name: max_consecutive_errors
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 5
        - in: query
          name: user_agent
          schema:
            type: string
            description: Specific user agent to use (selected by backend)
        - in: query
          name: wait_for_selectors
          schema:
            type: array
            items:
              type: string
            description: CSS selectors to wait for before considering page loaded (for dynamic content)
      responses:
        '200':
          description: Scrape response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/crawl:
    post:
      tags: [jobs]
      summary: Create a crawl job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrawlCreateRequest'
      responses:
        '200':
          description: Crawl job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/crawl/{jobId}:
    get:
      tags: [jobs]
      summary: Get crawl job status/result
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Crawl job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/parse:
    get:
      tags: [parse]
      summary: Get parse job status and result
      description: Retrieve the status and results of a previously submitted parse job
      parameters:
        - in: query
          name: job_id
          required: true
          schema:
            type: string
          description: The job ID returned from the POST /v1/parse request
      responses:
        '200':
          description: Parse job status and result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags: [parse]
      summary: Parse HTML or Markdown content using LLM
      description: Extract structured data from HTML or Markdown content with customizable output schemas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParseCreateRequest'
      responses:
        '200':
          description: Parse operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /v1/parse/templates:
    get:
      tags: [parse]
      summary: Get available parse templates
      description: List all available prompt templates with descriptions and supported content types
      responses:
        '200':
          description: Available templates and configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseTemplatesResponse'
  /v1/parse/examples:
    get:
      tags: [parse]
      summary: Get example output specifications
      description: Get example output schemas for different content types
      responses:
        '200':
          description: Example output specifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseExamplesResponse'
  /v1/screenshots:
    post:
      tags: [screenshots]
      summary: Create a screenshot job or stream sync file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenshotCreateRequest'
      responses:
        '200':
          description: Screenshot job created or image streamed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenshotJobResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags: [screenshots]
      summary: Get screenshot artifact by job id
      parameters:
        - in: query
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Screenshot content or URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenshotGetResponse'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Enter your API key. Get yours at: https://supacrawler.com/dashboard/api-keys'
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden - Access denied (e.g., robots.txt disallowed)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestTimeout:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable entity - Content filtered or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too many requests - Rate limited
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string

    ScrapeResponse:
      type: object
      properties:
        success:
          type: boolean
        url:
          type: string
          format: uri
        title:
          type: string
        content:
          type: string
          description: Markdown content or links depending on format
        html:
          type: string
          description: HTML content (only if include_html=true)
        links:
          type: array
          items:
            type: string
          description: All discovered links on the page (always included)
        discovered:
          type: integer
          description: Number of links discovered
        metadata:
          $ref: '#/components/schemas/ScrapeMetadata'
      required: [success, url, links, metadata]

    ScrapeMetadata:
      type: object
      properties:
        status_code:
          type: integer
        depth:
          type: integer
        source_url:
          type: string
          format: uri
        title:
          type: string
        description:
          type: string
        language:
          type: string
        canonical:
          type: string
        favicon:
          type: string
        og_title:
          type: string
        og_description:
          type: string
        og_image:
          type: string
        og_site_name:
          type: string
        twitter_title:
          type: string
        twitter_description:
          type: string
        twitter_image:
          type: string

    CrawlCreateRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        format:
          type: string
          enum: [markdown, html]
        depth:
          type: integer
        link_limit:
          type: integer
        include_subdomains:
          type: boolean
        include_html:
          type: boolean
        fresh:
          type: boolean
          description: Bypass cache and fetch fresh content
        patterns:
          type: array
          items:
            type: string
          description: URL patterns to match (e.g., ["/blog/*", "/docs/*"])
        proxy_mode:
          type: string
          enum: [off, shared_pool, residential]
          default: off
          description: Proxy rotation mode
        proxy_region:
          type: string
          description: ISO country code (e.g., "us", "eu", "gb")
        proxy_session:
          type: string
          description: Sticky session key for proxy consistency
        rotate_user_agent:
          type: boolean
          default: true
          description: Enable user agent rotation
        enable_bot_protection:
          type: boolean
          default: true
          description: Enable anti-bot detection and pivoting
        max_consecutive_errors:
          type: integer
          minimum: 1
          maximum: 20
          default: 5
          description: Max consecutive errors before pivoting strategy
        user_agent:
          type: string
          description: Specific user agent to use (selected by backend)
        wait_for_selectors:
          type: array
          items:
            type: string
          description: CSS selectors to wait for before considering page loaded (for dynamic content)
        webhook_url:
          type: string
          format: uri
          description: Optional webhook URL to notify when job completes
        webhook_headers:
          type: object
          additionalProperties:
            type: string
          description: Optional HTTP headers to include in webhook requests
      required: [url]

    CrawlCreateResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
      required: [success, job_id]

    CrawlStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        data:
          $ref: '#/components/schemas/CrawlJobData'
        error:
          type: string
      required: [success, status]

    CrawlJobData:
      type: object
      properties:
        url:
          type: string
        crawl_data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PageContent'
        error_data:
          type: object
          additionalProperties:
            type: string
        statistics:
          $ref: '#/components/schemas/CrawlStatistics'

    PageContent:
      type: object
      properties:
        markdown:
          type: string
          x-order: 1
        html:
          type: string
          x-order: 2
        links:
          type: array
          items:
            type: string
          description: All discovered links on the page
          x-order: 3
        metadata:
          $ref: '#/components/schemas/PageMetadata'
          x-order: 4
      required: [markdown, links, metadata]

    PageMetadata:
      type: object
      properties:
        title:
          type: string
        status_code:
          type: integer
        description:
          type: string
        language:
          type: string
        canonical:
          type: string
        favicon:
          type: string
        og_title:
          type: string
        og_description:
          type: string
        og_image:
          type: string
        og_site_name:
          type: string
        twitter_title:
          type: string
        twitter_description:
          type: string
        twitter_image:
          type: string
        source_url:
          type: string
          format: uri

    CrawlStatistics:
      type: object
      properties:
        total_pages:
          type: integer
        successful_pages:
          type: integer
        failed_pages:
          type: integer

    ParseCreateRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Natural language prompt that may include URLs and extraction instructions
          example: "Crawl https://example.com/blog and give me the 5 most recent posts in CSV."
        schema:
          type: object
          additionalProperties: true
          description: Optional JSON schema for structured output
          example:
            type: object
            properties:
              posts:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    date:
                      type: string
                    url:
                      type: string
                  required: ["title", "date", "url"]
            required: ["posts"]
        output_format:
          type: string
          enum: [json, csv, markdown, xml, yaml]
          default: json
          description: Preferred output format
        stream:
          type: boolean
          default: false
          description: Enable streaming responses for real-time results
        max_depth:
          type: integer
          minimum: 1
          maximum: 3
          default: 1
          description: Maximum crawl depth (if crawling is needed)
        max_pages:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Maximum pages to process
      required: [prompt]

    ParseResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the parsing operation succeeded
        data:
          description: Extracted data as JSON object, CSV string, or markdown
        workflow_status:
          type: string
          enum: [analyzing, crawling, scraping, extracting, formatting, completed, failed]
          description: Current workflow stage
        pages_processed:
          type: integer
          description: Number of pages processed so far
        total_pages:
          type: integer
          description: Total pages discovered (if known)
        partial_results:
          type: array
          items:
            type: object
          description: Incremental results for streaming responses
        execution_time:
          type: integer
          description: Total execution time in milliseconds
        error:
          type: string
          description: Error message if parsing failed
        input_tokens:
          type: integer
          description: Number of input tokens consumed by LLM calls
        output_tokens:
          type: integer
          description: Number of output tokens generated by LLM calls
        total_tokens:
          type: integer
          description: Total tokens consumed (input + output)
      required: [success]

    ParseValidationResult:
      type: object
      properties:
        is_valid:
          type: boolean
          description: Whether the response is valid
        format:
          type: string
          enum: [json, csv]
          description: Format of the response
        errors:
          type: array
          items:
            type: string
          description: Validation errors
        fields_found:
          type: array
          items:
            type: string
          description: JSON fields discovered
        row_count:
          type: integer
          description: CSV row count
        column_count:
          type: integer
          description: CSV column count
      required: [is_valid, format, errors]

    ParseTemplatesResponse:
      type: object
      properties:
        success:
          type: boolean
        templates:
          type: object
          additionalProperties:
            type: string
          description: Available templates with descriptions
        content_types:
          type: array
          items:
            type: string
          description: Supported content types
        output_formats:
          type: array
          items:
            type: string
          description: Supported output formats
      required: [success, templates, content_types, output_formats]

    ParseExamplesResponse:
      type: object
      properties:
        success:
          type: boolean
        examples:
          type: object
          additionalProperties:
            type: object
            additionalProperties: true
          description: Example output specifications
      required: [success, examples]

    ScreenshotCreateRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        full_page:
          type: boolean
        format:
          type: string
          enum: [png, jpeg, jpg, webp]
        width:
          type: integer
        height:
          type: integer
        quality:
          type: integer
          minimum: 1
          maximum: 100
        device:
          type: string
          enum: [desktop, mobile, tablet, custom]
        wait_until:
          type: string
          enum: [load, domcontentloaded, networkidle]
        timeout:
          type: integer
          minimum: 5
          maximum: 120
        dark_mode:
          type: boolean
        delay:
          type: integer
          minimum: 0
          maximum: 30
        wait_for_selector:
          type: string
        click_selector:
          type: string
        hide_selectors:
          type: array
          items:
            type: string
        block_ads:
          type: boolean
        block_cookies:
          type: boolean
        block_chats:
          type: boolean
        block_trackers:
          type: boolean
        block_resources:
          type: array
          items:
            type: string
            enum: [image, stylesheet, script, font]
        user_agent:
          type: string
        headers:
          type: object
          additionalProperties:
            type: string
        cookies:
          type: array
          items:
            type: object
        reduced_motion:
          type: boolean
        high_contrast:
          type: boolean
        disable_js:
          type: boolean
        print_mode:
          type: boolean
        ignore_https:
          type: boolean
        device_scale:
          type: number
        is_mobile:
          type: boolean
        has_touch:
          type: boolean
        is_landscape:
          type: boolean
        stream:
          type: boolean
      required: [url]

    ScreenshotJobResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
        type:
          type: string
          enum: [screenshot]
        status:
          type: string
          enum: [processing, completed, failed]
        url:
          type: string
        metadata:
          $ref: '#/components/schemas/ScreenshotMetadata'
      required: [success, job_id]

    ScreenshotGetResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
        url:
          type: string
          description: Source URL of the page
        screenshot:
          type: string
          description: Signed or public URL to the image
        status:
          type: string
          enum: [processing, completed, failed]
        metadata:
          $ref: '#/components/schemas/ScreenshotMetadata'
      required: [success]

    ScreenshotMetadata:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
        format:
          type: string
        quality:
          type: integer
        file_size:
          type: integer
        load_time:
          type: integer
        device:
          type: string
        device_scale:
          type: number


